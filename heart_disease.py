# -*- coding: utf-8 -*-
"""Heart disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mAZZV_YZCtsZfaNKi4Mtgo4dVMj2XJIc

import dependances
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score



"""Data collection and processing"""

#loading the csvc wdata to a pandas dataframe
heart_data = pd.read_csv('/content/heart_disease_data.csv')

heart_data.head()

heart_data.tail()

heart_data.shape

heart_data.info()

#checking for missing values
heart_data.isnull().sum()

#statistical measures of the data
heart_data.describe()

#checking the distribution of target variables
heart_data['target'].value_counts()



"""1-->Defective heart


0-->healthy heart
"""



"""splitting the features and targets"""

x=heart_data.drop(columns='target' , axis=1)
y=heart_data['target']

print(x)

print(y)



"""splitting the data into train data and test data"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)



"""Training model


Logistic regression
"""

#training the logistic regression model with training data

model=LogisticRegression()
model.fit(x_train,y_train)



"""model evaluation

Accuracy score
"""

#accuracy on training data

x_train_prediction=model.predict(x_train)

training_data_accuracy=accuracy_score(x_train_prediction,y_train)

print('Accuracy on training data :',training_data_accuracy)

#accuracy on testing data

x_test_prediction=model.predict(x_test)

test_data_accuracy=accuracy_score(x_test_prediction,y_test)

print('Accuracy on testing data :',test_data_accuracy)



"""Building Predictive system"""

input_data=(57,0,0,120,354,0,1,163,1,0.6,2,0,2)

#change the data as numpy array

input_data_as_numpy_array=np.asarray(input_data)
#reshape the array as we are predicting for only one instance

input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction=model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print('')