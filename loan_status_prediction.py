# -*- coding: utf-8 -*-
"""loan status prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DDvdgYlvqY_w3rzSvZ43oKW-0VBQQnOt
"""



"""importing the dependendencies"""

import numpy as np
import seaborn as sns
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score



"""Data colllection and processing"""

loan_dataset=pd.read_csv('/content/loan_dataset.csv')
type(loan_dataset)

loan_dataset.head()

#numbers of rows and columns

loan_dataset.shape

#statistical dataset

loan_dataset.describe()

#count the number of missing values

loan_dataset.isnull().sum()

#dropping the missing values

loan_dataset = loan_dataset.dropna()

#label encoding

loan_dataset.replace({"loan status":{'N':0,'Y':1}},inplace=True)

loan_dataset.head()

loan_dataset['Dependents'].value_counts()

#replacing the value of 3+ to 4

loan_dataset=loan_dataset.replace(to_replace='3+',value=4)

#dependant values
loan_dataset['Dependents'].value_counts()



"""Data visualization"""

#education & loan status

sns.countplot(x='Education',hue='Loan_Status',data=loan_dataset)



#marital status & loan status
sns.countplot(x='Married',hue='Loan_Status',data=loan_dataset)

#convert the columns to numerical values

loan_dataset.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1,'Female':0},'Self_Employed':{'No':0,'Yes':1},
                      'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Graduate':1,'Not Graduate':0}},inplace=True)

loan_dataset.head()

#separating the data and label

x=loan_dataset.drop(columns=['Loan_ID','Loan_Status'],axis=1)
y=loan_dataset['Loan_Status']

print(x)

print(y)



"""train Test and split"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)



"""Training the model"""

#svm model

classifier=svm.SVC(kernel='linear')
#training the support vector machine model
classifier.fit(x_train,y_train)



"""model evaluation"""

#accuracy score of the training data
x_train_prediction=classifier.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)

print('Accuracy on training data:',training_data_accuracy)

#accuracy score of the testing data
x_test_prediction=classifier.predict(x_test)
testing_data_accuracy=accuracy_score(x_test_prediction,y_test)
print('Accuracy on testing data:',testing_data_accuracy)



"""Making a predictive system"""

